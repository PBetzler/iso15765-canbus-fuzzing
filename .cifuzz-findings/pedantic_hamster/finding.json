{
  "name": "pedantic_hamster",
  "type": "CRASH",
  "input_data": "YHx0H3T/QP///////////wB0dAYAALxpR70KADUpUAAAdHQf/xoLAAALAAC8aUe9CgA1KVAAAHR0H/8aCwAACwC7dP/bGrvbR70KADZQAAB0dB//GgubAAsAu3T/2xpFLSga",
  "logs": [
    "==316320==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x71a6e4009d6c at pc 0x63c4c94b1db7 bp 0x7ffe6c211fa0 sp 0x7ffe6c211760",
    "READ of size 96 at 0x71a6e4009d6c thread T0",
    "    #0 0x63c4c94b1db6 in __asan_memmove (/home/philip/Code/Customer-Projects/Garrett/iso15765-canbus-fuzzing/.cifuzz/build/libfuzzer/address+undefined/fuzz-tests/fuzz_iso15765+0x159db6) (BuildId: 9dd02cf8bd0fde43f31c85d35b600d36615ce6b5)",
    "    #1 0x63c4c950022d in n_pdu_unpack_dt /home/philip/Code/Customer-Projects/Garrett/iso15765-canbus-fuzzing/src/lib_iso15765.c",
    "    #2 0x63c4c950022d in n_pdu_unpack /home/philip/Code/Customer-Projects/Garrett/iso15765-canbus-fuzzing/src/lib_iso15765.c:471:2",
    "    #3 0x63c4c950022d in iso15765_process_in /home/philip/Code/Customer-Projects/Garrett/iso15765-canbus-fuzzing/src/lib_iso15765.c:763:6",
    "    #4 0x63c4c94fe837 in iso15765_process /home/philip/Code/Customer-Projects/Garrett/iso15765-canbus-fuzzing/src/lib_iso15765.c:1020:11",
    "    #5 0x63c4c94f8f8d in LLVMFuzzerTestOneInputNoReturn(unsigned char const*, unsigned long) /home/philip/Code/Customer-Projects/Garrett/iso15765-canbus-fuzzing/fuzz-tests/fuzz_iso15765.cpp",
    "    #6 0x63c4c94f9c17 in LLVMFuzzerTestOneInput /home/philip/Code/Customer-Projects/Garrett/iso15765-canbus-fuzzing/fuzz-tests/fuzz_iso15765.cpp:73:1",
    "    #7 0x63c4c93ff8b4 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/home/philip/Code/Customer-Projects/Garrett/iso15765-canbus-fuzzing/.cifuzz/build/libfuzzer/address+undefined/fuzz-tests/fuzz_iso15765+0xa78b4) (BuildId: 9dd02cf8bd0fde43f31c85d35b600d36615ce6b5)",
    "    #8 0x63c4c93fefa9 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool, bool*) (/home/philip/Code/Customer-Projects/Garrett/iso15765-canbus-fuzzing/.cifuzz/build/libfuzzer/address+undefined/fuzz-tests/fuzz_iso15765+0xa6fa9) (BuildId: 9dd02cf8bd0fde43f31c85d35b600d36615ce6b5)",
    "    #9 0x63c4c9400bc6 in fuzzer::Fuzzer::ReadAndExecuteSeedCorpora(std::vector\u003cfuzzer::SizedFile, std::allocator\u003cfuzzer::SizedFile\u003e\u003e\u0026) (/home/philip/Code/Customer-Projects/Garrett/iso15765-canbus-fuzzing/.cifuzz/build/libfuzzer/address+undefined/fuzz-tests/fuzz_iso15765+0xa8bc6) (BuildId: 9dd02cf8bd0fde43f31c85d35b600d36615ce6b5)",
    "    #10 0x63c4c94010d7 in fuzzer::Fuzzer::Loop(std::vector\u003cfuzzer::SizedFile, std::allocator\u003cfuzzer::SizedFile\u003e\u003e\u0026) (/home/philip/Code/Customer-Projects/Garrett/iso15765-canbus-fuzzing/.cifuzz/build/libfuzzer/address+undefined/fuzz-tests/fuzz_iso15765+0xa90d7) (BuildId: 9dd02cf8bd0fde43f31c85d35b600d36615ce6b5)",
    "    #11 0x63c4c93ee5cf in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (/home/philip/Code/Customer-Projects/Garrett/iso15765-canbus-fuzzing/.cifuzz/build/libfuzzer/address+undefined/fuzz-tests/fuzz_iso15765+0x965cf) (BuildId: 9dd02cf8bd0fde43f31c85d35b600d36615ce6b5)",
    "    #12 0x63c4c9418c56 in main (/home/philip/Code/Customer-Projects/Garrett/iso15765-canbus-fuzzing/.cifuzz/build/libfuzzer/address+undefined/fuzz-tests/fuzz_iso15765+0xc0c56) (BuildId: 9dd02cf8bd0fde43f31c85d35b600d36615ce6b5)",
    "    #13 0x71a6e5e2a1c9 in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58:16",
    "    #14 0x71a6e5e2a28a in __libc_start_main ../csu/libc-start.c:360:3",
    "    #15 0x63c4c93e35b4 in _start (/home/philip/Code/Customer-Projects/Garrett/iso15765-canbus-fuzzing/.cifuzz/build/libfuzzer/address+undefined/fuzz-tests/fuzz_iso15765+0x8b5b4) (BuildId: 9dd02cf8bd0fde43f31c85d35b600d36615ce6b5)",
    "",
    "Address 0x71a6e4009d6c is located in stack of thread T0 at offset 108 in frame",
    "    #0 0x63c4c94fe197 in iso15765_process /home/philip/Code/Customer-Projects/Garrett/iso15765-canbus-fuzzing/src/lib_iso15765.c:1012",
    "",
    "  This frame has 1 object(s):",
    "    [32, 108) 'frame' (line 1015) \u003c== Memory access at offset 108 overflows this variable",
    "HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork",
    "      (longjmp and C++ exceptions *are* supported)",
    "SUMMARY: AddressSanitizer: stack-buffer-overflow (/home/philip/Code/Customer-Projects/Garrett/iso15765-canbus-fuzzing/.cifuzz/build/libfuzzer/address+undefined/fuzz-tests/fuzz_iso15765+0x159db6) (BuildId: 9dd02cf8bd0fde43f31c85d35b600d36615ce6b5) in __asan_memmoveMS: 0 ; base unit: 0000000000000000000000000000000000000000",
    "0x60,0x7c,0x74,0x1f,0x74,0xff,0x40,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x74,0x74,0x6,0x0,0x0,0xbc,0x69,0x47,0xbd,0xa,0x0,0x35,0x29,0x50,0x0,0x0,0x74,0x74,0x1f,0xff,0x1a,0xb,0x0,0x0,0xb,0x0,0x0,0xbc,0x69,0x47,0xbd,0xa,0x0,0x35,0x29,0x50,0x0,0x0,0x74,0x74,0x1f,0xff,0x1a,0xb,0x0,0x0,0xb,0x0,0xbb,0x74,0xff,0xdb,0x1a,0xbb,0xdb,0x47,0xbd,0xa,0x0,0x36,0x50,0x0,0x0,0x74,0x74,0x1f,0xff,0x1a,0xb,0x9b,0x0,0xb,0x0,0xbb,0x74,0xff,0xdb,0x1a,0x45,0x2d,0x28,0x1a,",
    "`|t\\037t\\377@\\377\\377\\377\\377\\377\\377\\377\\377\\377\\000tt\\006\\000\\000\\274iG\\275\\012\\0005)P\\000\\000tt\\037\\377\\032\\013\\000\\000\\013\\000\\000\\274iG\\275\\012\\0005)P\\000\\000tt\\037\\377\\032\\013\\000\\000\\013\\000\\273t\\377\\333\\032\\273\\333G\\275\\012\\0006P\\000\\000tt\\037\\377\\032\\013\\233\\000\\013\\000\\273t\\377\\333\\032E-(\\032",
    "artifact_prefix='/tmp/libfuzzer-out-494316269/'; Test unit written to .cifuzz-findings/pedantic_hamster/crashing-input",
    "Base64: YHx0H3T/QP///////////wB0dAYAALxpR70KADUpUAAAdHQf/xoLAAALAAC8aUe9CgA1KVAAAHR0H/8aCwAACwC7dP/bGrvbR70KADZQAAB0dB//GgubAAsAu3T/2xpFLSga",
    "Shadow bytes around the buggy address:",
    "  0x71a6e4009a80: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5",
    "  0x71a6e4009b00: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5",
    "  0x71a6e4009b80: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5",
    "  0x71a6e4009c00: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5",
    "  0x71a6e4009c80: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5",
    "=\u003e0x71a6e4009d00: f1 f1 f1 f1 00 00 00 00 00 00 00 00 00[04]f3 f3",
    "  0x71a6e4009d80: f3 f3 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00",
    "  0x71a6e4009e00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00",
    "  0x71a6e4009e80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00",
    "  0x71a6e4009f00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00",
    "  0x71a6e4009f80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00",
    "Shadow byte legend (one shadow byte represents 8 application bytes):",
    "  Addressable:           00",
    "  Partially addressable: 01 02 03 04 05 06 07 ",
    "  Heap left redzone:       fa",
    "  Freed heap region:       fd",
    "  Stack left redzone:      f1",
    "  Stack mid redzone:       f2",
    "  Stack right redzone:     f3",
    "  Stack after return:      f5",
    "  Stack use after scope:   f8",
    "  Global redzone:          f9",
    "  Global init order:       f6",
    "  Poisoned by user:        f7",
    "  Container overflow:      fc",
    "  Array cookie:            ac",
    "  Intra object redzone:    bb",
    "  ASan internal:           fe",
    "  Left alloca redzone:     ca",
    "  Right alloca redzone:    cb"
  ],
  "details": "stack-buffer-overflow on address 0x71a6e4009d6c at pc 0x63c4c94b1db7 bp 0x7ffe6c211fa0 sp 0x7ffe6c211760",
  "more_details": {
    "id": "stack_buffer_overflow",
    "name": "Stack Buffer Overflow",
    "description": "A stack buffer overflow occurs when the execution stack (function calls) exceeds a set threshold. A stack over flow vulnerability can be used by an attacker to overwrite memory locations close to the stack. For example, the stack return address, or exception handlers, which would allow the attacker to divert the program execution to his code.",
    "severity": {
      "description": "High",
      "score": 7
    },
    "links": [
      {
        "description": "ASan Example",
        "url": "https://github.com/google/sanitizers/wiki/AddressSanitizerExampleStackOutOfBounds"
      },
      {
        "description": "CWE: Stack-based Buffer Overflow",
        "url": "https://cwe.mitre.org/data/definitions/121.html"
      }
    ],
    "cwe_details": {
      "id": 121,
      "name": "Stack-based Buffer Overflow",
      "description": "A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function)."
    }
  },
  "assessment": {
    "status": "not_affected",
    "message": ""
  },
  "created_at": "2024-11-19T17:13:53.289976776+01:00",
  "input_file": ".cifuzz-findings/pedantic_hamster/crashing-input",
  "stack_trace": [
    {
      "SourceFile": "src/lib_iso15765.c",
      "Line": 471,
      "Column": 2,
      "FrameNumber": 2,
      "Function": "n_pdu_unpack"
    },
    {
      "SourceFile": "src/lib_iso15765.c",
      "Line": 763,
      "Column": 6,
      "FrameNumber": 3,
      "Function": "iso15765_process_in"
    },
    {
      "SourceFile": "src/lib_iso15765.c",
      "Line": 1020,
      "Column": 11,
      "FrameNumber": 4,
      "Function": "iso15765_process"
    },
    {
      "SourceFile": "fuzz-tests/fuzz_iso15765.cpp",
      "Line": 73,
      "Column": 1,
      "FrameNumber": 6,
      "Function": "LLVMFuzzerTestOneInput"
    }
  ],
  "fuzz_test": "fuzz_iso15765"
}